---
name: CI

on:
  push:
    branches:
      - master
    tags:
      - "*"
  pull_request:
    branches:
      - master
  workflow_dispatch:
    inputs:
      use_cache:
        description: "Use build cache"
        required: true
        type: boolean
        default: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Use Node.js LTS/Jod
        uses: actions/setup-node@v4
        with:
          node-version-file: ".node-version"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Build project
        run: pnpm run build

      - name: Lint project
        run: pnpm run lint

      - name: Run tests
        run: pnpm run test

  lighthouse:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Use Node.js LTS/Jod
        uses: actions/setup-node@v4
        with:
          node-version-file: ".node-version"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Build project
        run: pnpm run build
        env:
          VITE_DISABLE_VERCEL_ANALYTICS: "true"

      - name: Install Caddy
        run: |
          sudo apt install -y debian-keyring debian-archive-keyring apt-transport-https curl
          curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' | sudo gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg
          curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' | sudo tee /etc/apt/sources.list.d/caddy-stable.list
          sudo apt update
          sudo apt install caddy

      - name: Run Lighthouse CI
        run: pnpm lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  docker:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3.4.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.title=Fluorite
            org.opencontainers.image.description=An elegant PWA video player
            org.opencontainers.image.authors=AFCMS <afcm.contact@gmail.com>
            org.opencontainers.image.licenses=GPL-3.0-only
            org.opencontainers.image.source=https://github.com/AFCMS/fluorite
            io.artifacthub.package.logo-url=https://raw.githubusercontent.com/AFCMS/fluorite/refs/heads/master/public/fluorite.svg
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/AFCMS/fluorite/refs/heads/master/.github/README_ARTIFACTHUB.md
            io.artifacthub.package.category=skip-prediction
            io.artifacthub.package.keywords=video-player,offline,pwa
            io.artifacthub.package.license=GPL-3.0-only
            io.artifacthub.package.maintainers=[{"name":"AFCMS","email":"afcm.contact@gmail.com"}]
          annotations: |
            org.opencontainers.image.title=Fluorite
            org.opencontainers.image.description=An elegant PWA video player
            org.opencontainers.image.authors=AFCMS <afcm.contact@gmail.com>
            org.opencontainers.image.licenses=GPL-3.0-only
            org.opencontainers.image.source=https://github.com/AFCMS/fluorite
            io.artifacthub.package.logo-url=https://raw.githubusercontent.com/AFCMS/fluorite/refs/heads/master/public/fluorite.svg
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/AFCMS/fluorite/refs/heads/master/.github/README_ARTIFACTHUB.md
            io.artifacthub.package.category=skip-prediction
            io.artifacthub.package.keywords=video-player,offline,pwa
            io.artifacthub.package.license=GPL-3.0-only
            io.artifacthub.package.maintainers=[{"name":"AFCMS","email":"afcm.contact@gmail.com"}]

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64,linux/arm64,linux/arm/v6,linux/arm/v7,linux/ppc64le,linux/riscv64,linux/s390x
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          no-cache: ${{ (github.event_name == 'workflow_dispatch' && !inputs.use_cache) || startsWith(github.ref, 'refs/tags/') }}

      - name: Attest Build Provenance
        if: github.event_name != 'pull_request'
        uses: actions/attest-build-provenance@v3
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build-and-push.outputs.digest }}
          push-to-registry: false
